generator client {
  provider            = "prisma-client"
  output              = "../src/dsrc"
  engineType          = "client"
  moduleFormat        = "esm"
  importFileExtension = "js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator zod {
  provider = "node ./lib/generator.js"
  config   = "./zod-generator.config.json"
  output   = "../src/schemas"
}

model ZodV4Examples {
  id Int @id @default(autoincrement())

  /// @zod.custom({ "title": "Test", "description": "Test", "isPublished": true })
  content Json

  // String format methods with no parameters (use default validation)
  /// @zod.email()
  email String

  /// @zod.url()
  website String

  /// @zod.uuid()
  uuid String

  /// @zod.nanoid()
  nanoidDefault String

  /// @zod.nanoid({"abort":true,"pattern":new RegExp('.'), error: 'lol'})
  nanoidCustom String

  /// @zod.jwt()
  jwtDefault String

  /// @zod.base64()
  base64Default String

  /// @zod.ipv4()
  ipv4Default String

  /// @zod.ipv6()
  ipv6Default String

  // String format methods with custom error messages
  /// @zod.email("Please provide a valid email address")
  emailWithMessage String

  /// @zod.url("Must be a valid URL")
  urlWithMessage String

  /// @zod.uuid("Invalid UUID format")
  uuidWithMessage String

  /// @zod.nanoid("Invalid nanoid format")
  nanoidWithMessage String

  /// @zod.jwt("Invalid JWT token")
  jwtWithMessage String

  /// @zod.base64("Invalid base64 encoding")
  base64WithMessage String

  /// @zod.ipv4("Invalid IPv4 address")
  ipv4WithMessage String

  /// @zod.ipv6("Invalid IPv6 address")
  ipv6WithMessage String

  /// @zod.cuid("Invalid CUID format")
  cuidWithMessage String

  /// @zod.cuid2("Invalid CUID2 format")
  cuid2WithMessage String

  /// @zod.ulid("Invalid ULID format")
  ulidWithMessage String

  /// @zod.emoji("Must be a valid emoji")
  emojiWithMessage String

  // String format methods without parameters for testing
  /// @zod.cuid()
  cuidDefault String

  /// @zod.cuid2()
  cuid2Default String

  /// @zod.ulid()
  ulidDefault String

  /// @zod.emoji()
  emojiDefault String

  /// @zod.base64url()
  base64urlDefault String

  /// @zod.hex()
  hexDefault String

  /// @zod.cidrv4()
  cidrv4Default String

  /// @zod.cidrv6()
  cidrv6Default String

  // ISO methods (these should generate z.iso.xxx() in v4)
  /// @zod.isoDate()
  isoDateDefault String

  /// @zod.isoTime()
  isoTimeDefault String

  /// @zod.isoDatetime()
  isoDatetimeDefault String

  /// @zod.isoDuration()
  isoDurationDefault String

  // ISO methods with custom error messages
  /// @zod.isoDate("Invalid ISO date format")
  isoDateWithMessage String

  /// @zod.isoTime("Invalid ISO time format")
  isoTimeWithMessage String

  /// @zod.isoDatetime("Invalid ISO datetime format")
  isoDatetimeWithMessage String

  /// @zod.isoDuration("Invalid ISO duration format")
  isoDurationWithMessage String

  // Regular string validations for comparison
  /// @zod.min(5)
  minLength String

  /// @zod.max(100)
  maxLength String

  /// @zod.length(10)
  exactLength String

  // Chained validations
  /// @zod.email().max(100)
  emailWithMaxLength String

  /// @zod.url().optional()
  optionalUrl String?

  /// @zod.uuid().nullable()
  nullableUuid String?
}
